package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Person;
import com.example.jdbcdemo.domain.Shoe;

public class ShoeManagerJDBC implements ShoeManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createTableShoe = "CREATE TABLE Shoe(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, size INT NOT NULL, price double)";

	private PreparedStatement addShoeStmt;
	private PreparedStatement deleteAllShoesStmt;
	private PreparedStatement deleteShoeStmt;
	private PreparedStatement getAllShoesStmt;
	private PreparedStatement updateShoeStmt;
	private PreparedStatement findShoeIdStmt;
	private PreparedStatement findShoeNameStmt;


	private Statement statement;

	public ShoeManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Shoe".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableShoe);

			addShoeStmt = connection
					.prepareStatement("INSERT INTO Shoe (name, size, price) VALUES (?,?,?)");
			deleteAllShoesStmt = connection
					.prepareStatement("DELETE FROM Shoe");
			deleteShoeStmt = connection
					.prepareStatement("DELETE FROM Shoe WHERE id=?");
			updateShoeStmt = connection
					.prepareStatement("UPDATE Shoe SET name=?, size=?, price=? WHERE id=?");
			getAllShoesStmt = connection
					.prepareStatement("SELECT id, name, size, price FROM Shoe");
			findShoeIdStmt =  connection
					.prepareStatement("SELECT id, name, size, price FROM Shoe WHERE id=?");
			findShoeNameStmt =  connection
					.prepareStatement("SELECT id, name, size, price FROM Shoe WHERE name=?");

			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearShoes() {
		try {
			deleteAllShoesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addShoe(Shoe shoe) {
		int count = 0;
		try {
			addShoeStmt.setString(1, shoe.getName());
			addShoeStmt.setInt(2, shoe.getSize());
			addShoeStmt.setDouble(3, shoe.getPrice());

			count = addShoeStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public int updateShoe(Shoe shoe, String name,int size, double price) {
		int count = 0;
		try {
			updateShoeStmt.setString(1, name);
			updateShoeStmt.setInt(2, size);
			updateShoeStmt.setDouble(3, price);
			updateShoeStmt.setLong(4, shoe.getID());

			count = updateShoeStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	@Override
    public int updateShoeName(Shoe shoe, String name) {
        return updateShoe(shoe, name, shoe.getSize(), shoe.getPrice());
    }
	
	@Override
	public int updateShoeSize(Shoe shoe, int size) {
        return updateShoe(shoe, shoe.getName(), size, shoe.getPrice());
    }
	
	@Override
	public int updateShoePrice(Shoe shoe, double price) {
        return updateShoe(shoe, shoe.getName(), shoe.getSize(), price);
    }
	
	

	@Override
	public int deleteShoe(Shoe shoe) {
		int count = 0;
		try {
			deleteShoeStmt.setLong(1, shoe.getID());
			count = deleteShoeStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	@Override
    public void deleteAllShoes() {
        try {
            deleteAllShoesStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

	@Override
	public List<Shoe> getAllShoes() {
		List<Shoe> shoes = new ArrayList<Shoe>();

		try {
			ResultSet rs = getAllShoesStmt.executeQuery();

			while (rs.next()) {
				Shoe s = new Shoe();
				s.setID(rs.getLong("id"));
				s.setName(rs.getString("name"));
				s.setSize(rs.getInt("size"));
				s.setPrice(rs.getDouble("price"));
				shoes.add(s);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return shoes;
	}

	@Override
	public Shoe findShoeId(int id) {
		for (int i = 0; i < getAllShoes().size(); i++) {
			if (getAllShoes().get(i).getID() == id)
				return getAllShoes().get(i);
		}

		return null;
	}

	@Override
	public Shoe findShoeName(String name) {
		for (int i = 0; i < getAllShoes().size(); i++) {
			if (getAllShoes().get(i).getName() == name)
				return getAllShoes().get(i);
		}

		return null;
	}
	@Override
	public void addAllShoes(List<Shoe> shoes) {
		try {
			
			for (Shoe shoe : shoes) {
				connection.setAutoCommit(false);
				
				addShoeStmt.setString(1, shoe.getName());
				addShoeStmt.setInt(2, shoe.getSize());
				addShoeStmt.setDouble(3, shoe.getPrice());
				addShoeStmt.executeUpdate();
			}
			connection.commit();
		} catch (SQLException exception) {
			try {
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	  @Override
	    public int deleteAllSelectedShoes(List<Long> ids) {
	        int count = 0;
	        try {
	            for (Long id : ids) {
	                connection.setAutoCommit(false);

	                deleteShoeStmt.setLong(1, id);
	                count = count + deleteShoeStmt.executeUpdate();
	            }
	            if (count != ids.size()) {
	                connection.rollback();
	            }
	            connection.commit();
	        } catch (SQLException e) {
	            try {
	                connection.rollback();
	            } catch (SQLException e1) {
	                e1.printStackTrace();
	            }
	        }
	        System.out.println(count);

	        return count;
	    }

}
